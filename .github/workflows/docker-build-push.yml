name: Build and Push Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to build and push'
        required: true
        default: 'manual'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant:
          - name: "debian"
            dockerfile: "Dockerfile"
            suffix: ""
          - name: "alpine"
            dockerfile: "Dockerfile.alpine"
            suffix: "-alpine"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}${{ matrix.variant.suffix }},enable=${{ github.event_name == 'release' }}
          type=semver,pattern={{major}}.{{minor}}${{ matrix.variant.suffix }},enable=${{ github.event_name == 'release' }}
          type=raw,value=latest${{ matrix.variant.suffix }},enable=${{ github.event_name == 'release' }}
          type=raw,value=${{ github.event.inputs.tag }}${{ matrix.variant.suffix }},enable=${{ github.event_name == 'workflow_dispatch' }}

    - name: Build Docker image for testing (${{ matrix.variant.name }})
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant.dockerfile }}
        platforms: linux/amd64
        push: false
        load: true
        tags: culifeed-test:${{ matrix.variant.name }}
        cache-from: type=gha,key=${{ matrix.variant.name }}
        cache-to: type=gha,mode=max,key=${{ matrix.variant.name }}

    - name: Test Docker image (${{ matrix.variant.name }})
      run: |
        echo "ðŸ§ª Testing ${{ matrix.variant.name }} image before push..."

        # Test 1: Dependencies verification
        echo "ðŸ“‹ Test 1: Dependencies verification"
        docker run --rm --entrypoint="" culifeed-test:${{ matrix.variant.name }} \
          python -c "
        import asyncio, aiohttp, feedparser, telegram, yaml
        from bs4 import BeautifulSoup
        print('âœ… All critical dependencies available')
        "

        # Test 2: Configuration loading
        echo "ðŸ“‹ Test 2: Configuration loading"
        docker run --rm --entrypoint="" \
          -e CULIFEED_TELEGRAM__BOT_TOKEN="123456789:ABCdefGHIjklMNOpqrsTUVwxyz1234567890_test" \
          -e CULIFEED_DATABASE__URL="sqlite:///tmp/test.db" \
          culifeed-test:${{ matrix.variant.name }} \
          python -c "
        import sys
        sys.path.append('/app')
        from culifeed.config.settings import get_settings
        settings = get_settings()
        print('âœ… Configuration loads successfully')
        "

        # Test 3: Entry points exist
        echo "ðŸ“‹ Test 3: Service entry points"
        docker run --rm --entrypoint="" culifeed-test:${{ matrix.variant.name }} \
          sh -c 'test -f /app/run_bot.py && test -f /app/run_daily_scheduler.py && echo "âœ… Entry points exist"'

        echo "âœ… All tests passed for ${{ matrix.variant.name }}!"

    - name: Build and push Docker image (${{ matrix.variant.name }})
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,key=${{ matrix.variant.name }}

    - name: Cleanup test image (${{ matrix.variant.name }})
      if: always()
      run: docker rmi culifeed-test:${{ matrix.variant.name }} || true