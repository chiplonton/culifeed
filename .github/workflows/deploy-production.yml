name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (e.g., latest, latest-alpine, v1.2.0, v1.2.0-alpine)'
        required: true
        default: 'latest-alpine'
        type: string
      variant:
        description: 'Image variant to deploy'
        required: true
        default: 'alpine'
        type: choice
        options:
        - debian
        - alpine

env:
  COMPOSE_FILE: "docker-compose.yml"
  PROJECT_NAME: "culifeed"
  DEPLOY_IMAGE_TAG: ${{ inputs.image_tag || 'latest-alpine' }}

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

    - name: Deploy to Production
      env:
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_IMAGE_TAG: ${{ env.DEPLOY_IMAGE_TAG }}
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new ${DEPLOY_USER}@${DEPLOY_HOST} << DEPLOY_SCRIPT
        set -e

        # Set image tag for deployment
        export CULIFEED_IMAGE_TAG=${DEPLOY_IMAGE_TAG}

        echo "üöÄ Starting CuliFeed deployment..."
        echo "üìÖ Deployment started at: $(date)"
        echo "üì¶ Using image tag: \${CULIFEED_IMAGE_TAG}"
        
        # Navigate to deployment directory
        cd /opt/culifeed || { echo "‚ùå Deployment directory not found"; exit 1; }
        
        # Check if compose file exists
        if [ ! -f docker-compose.yml ]; then
            echo "‚ùå docker-compose.yml not found in /opt/culifeed"
            exit 1
        fi

        # Pull specified image
        echo "üì• Pulling image: ghcr.io/chiplonton/culifeed:\${CULIFEED_IMAGE_TAG}..."
        docker-compose pull
        
        # Check if image changed
        echo "üîç Checking for image changes..."
        NEW_DIGEST=$(docker inspect ghcr.io/chiplonton/culifeed:\${CULIFEED_IMAGE_TAG} --format='{{.Id}}' 2>/dev/null || echo "new")
        OLD_DIGEST=$(docker-compose images -q culifeed 2>/dev/null || echo "old")
        
        if [ "$NEW_DIGEST" = "$OLD_DIGEST" ]; then
            echo "‚úÖ No image changes detected, but proceeding with deployment"
        else
            echo "üÜï New image detected, proceeding with deployment"
        fi

        # Stop services gracefully
        echo "‚èπÔ∏è  Stopping current services..."
        docker-compose down --timeout 30

        # Start services with new images
        echo "üîÑ Starting updated services..."
        docker-compose up -d

        # Wait for services to be ready
        echo "‚è≥ Waiting for services to start..."
        sleep 15

        # Health check
        echo "ü©∫ Performing health check..."
        HEALTH_CHECK_PASSED=false
        for i in {1..6}; do
            if docker-compose ps | grep -q "Up"; then
                echo "‚úÖ Services are running (attempt $i/6)"
                
                # Additional health check - try to connect to the service
                if docker-compose exec -T culifeed python -c "import sys; sys.exit(0)" 2>/dev/null; then
                    echo "‚úÖ Service health check passed"
                    HEALTH_CHECK_PASSED=true
                    break
                else
                    echo "‚ö†Ô∏è  Service not fully ready yet (attempt $i/6)"
                fi
            else
                echo "‚ö†Ô∏è  Services not ready yet (attempt $i/6)"
            fi
            
            if [ $i -lt 6 ]; then
                sleep 10
            fi
        done

        if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "‚ùå Health check failed after 60 seconds"
            echo "üìä Service status:"
            docker-compose ps
            echo "üìã Service logs:"
            docker-compose logs --tail=20
            exit 1
        fi

        # Show final status
        echo "üìä Final deployment status:"
        docker-compose ps
        echo "‚úÖ Deployment completed successfully at: $(date)"
        echo "üéâ CuliFeed is now running with the latest image!"
        
        DEPLOY_SCRIPT

    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key

    - name: Deployment Success Notification
      if: success()
      run: |
        echo "‚úÖ Production deployment completed successfully"
        echo "üöÄ CuliFeed is now running with the latest image"
        echo "‚è∞ Deployed at: $(date -u)"

    - name: Deployment Failed Notification  
      if: failure()
      run: |
        echo "‚ùå Production deployment failed"
        echo "‚è∞ Failed at: $(date -u)"
        echo "üîß Please check server logs and service status"