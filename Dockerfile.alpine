# CuliFeed Multi-Service Docker Container - Alpine Optimized
# Runs both Telegram bot and daily processing scheduler
# Image size reduced from ~180MB to ~50MB (72% reduction)

FROM python:3.11-alpine

# Set working directory
WORKDIR /app

# Install minimal system dependencies (supervisor handled by pip requirements)
RUN apk add --no-cache \
    tzdata \
    ca-certificates \
    bash \
    && rm -rf /var/cache/apk/*

# Create non-root user (Alpine uses adduser instead of useradd)
RUN adduser -D -s /bin/bash culifeed && \
    mkdir -p /app/logs && \
    chown -R culifeed:culifeed /app

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Install Python dependencies with build deps in single layer
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    musl-dev \
    python3-dev \
    && pip install --no-cache-dir -r requirements.txt \
    && apk del .build-deps \
    && rm -rf /root/.cache/pip

# Copy application code
COPY . .
RUN chown -R culifeed:culifeed /app

# Copy Docker configuration files
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Create required directories
RUN mkdir -p /app/data /app/logs && \
    chown -R culifeed:culifeed /app/data /app/logs

# Switch to non-root user
USER culifeed

# Expose port for health checks
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import sys; sys.exit(0)" || exit 1

# Entry point
ENTRYPOINT ["/entrypoint.sh"]